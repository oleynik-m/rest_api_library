// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	rest_api "rest_api"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorService is a mock of AuthorService interface.
type MockAuthorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorServiceMockRecorder
}

// MockAuthorServiceMockRecorder is the mock recorder for MockAuthorService.
type MockAuthorServiceMockRecorder struct {
	mock *MockAuthorService
}

// NewMockAuthorService creates a new mock instance.
func NewMockAuthorService(ctrl *gomock.Controller) *MockAuthorService {
	mock := &MockAuthorService{ctrl: ctrl}
	mock.recorder = &MockAuthorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorService) EXPECT() *MockAuthorServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorService) Create(author rest_api.Author) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", author)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorServiceMockRecorder) Create(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorService)(nil).Create), author)
}

// Delete mocks base method.
func (m *MockAuthorService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthorServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthorService)(nil).Delete), id)
}

// GetAllAuthors mocks base method.
func (m *MockAuthorService) GetAllAuthors() ([]rest_api.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthors")
	ret0, _ := ret[0].([]rest_api.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthors indicates an expected call of GetAllAuthors.
func (mr *MockAuthorServiceMockRecorder) GetAllAuthors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthors", reflect.TypeOf((*MockAuthorService)(nil).GetAllAuthors))
}

// GetAuthorById mocks base method.
func (m *MockAuthorService) GetAuthorById(id int) (rest_api.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", id)
	ret0, _ := ret[0].(rest_api.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockAuthorServiceMockRecorder) GetAuthorById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockAuthorService)(nil).GetAuthorById), id)
}

// Update mocks base method.
func (m *MockAuthorService) Update(author rest_api.Author) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", author)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthorServiceMockRecorder) Update(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthorService)(nil).Update), author)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookService) Create(book rest_api.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookServiceMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookService)(nil).Create), book)
}

// Delete mocks base method.
func (m *MockBookService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookService)(nil).Delete), id)
}

// GetAllBooks mocks base method.
func (m *MockBookService) GetAllBooks() ([]rest_api.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks")
	ret0, _ := ret[0].([]rest_api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookServiceMockRecorder) GetAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookService)(nil).GetAllBooks))
}

// GetBookById mocks base method.
func (m *MockBookService) GetBookById(id int) (rest_api.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", id)
	ret0, _ := ret[0].(rest_api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockBookServiceMockRecorder) GetBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockBookService)(nil).GetBookById), id)
}

// GetItemsByBook mocks base method.
func (m *MockBookService) GetItemsByBook(id int) ([]rest_api.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByBook", id)
	ret0, _ := ret[0].([]rest_api.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByBook indicates an expected call of GetItemsByBook.
func (mr *MockBookServiceMockRecorder) GetItemsByBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByBook", reflect.TypeOf((*MockBookService)(nil).GetItemsByBook), id)
}

// Update mocks base method.
func (m *MockBookService) Update(book rest_api.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookServiceMockRecorder) Update(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookService)(nil).Update), book)
}

// MockDepartmentService is a mock of DepartmentService interface.
type MockDepartmentService struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentServiceMockRecorder
}

// MockDepartmentServiceMockRecorder is the mock recorder for MockDepartmentService.
type MockDepartmentServiceMockRecorder struct {
	mock *MockDepartmentService
}

// NewMockDepartmentService creates a new mock instance.
func NewMockDepartmentService(ctrl *gomock.Controller) *MockDepartmentService {
	mock := &MockDepartmentService{ctrl: ctrl}
	mock.recorder = &MockDepartmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentService) EXPECT() *MockDepartmentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDepartmentService) Create(department rest_api.Department) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", department)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDepartmentServiceMockRecorder) Create(department interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDepartmentService)(nil).Create), department)
}

// Delete mocks base method.
func (m *MockDepartmentService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDepartmentServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDepartmentService)(nil).Delete), id)
}

// GetAllDepartments mocks base method.
func (m *MockDepartmentService) GetAllDepartments() ([]rest_api.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDepartments")
	ret0, _ := ret[0].([]rest_api.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDepartments indicates an expected call of GetAllDepartments.
func (mr *MockDepartmentServiceMockRecorder) GetAllDepartments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDepartments", reflect.TypeOf((*MockDepartmentService)(nil).GetAllDepartments))
}

// GetDepartmentById mocks base method.
func (m *MockDepartmentService) GetDepartmentById(id int) (rest_api.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentById", id)
	ret0, _ := ret[0].(rest_api.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartmentById indicates an expected call of GetDepartmentById.
func (mr *MockDepartmentServiceMockRecorder) GetDepartmentById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentById", reflect.TypeOf((*MockDepartmentService)(nil).GetDepartmentById), id)
}

// Update mocks base method.
func (m *MockDepartmentService) Update(department rest_api.Department) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", department)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDepartmentServiceMockRecorder) Update(department interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentService)(nil).Update), department)
}

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemService) Create(item rest_api.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemServiceMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemService)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockItemService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemService)(nil).Delete), id)
}

// GetAllItems mocks base method.
func (m *MockItemService) GetAllItems() ([]rest_api.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]rest_api.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemServiceMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemService)(nil).GetAllItems))
}

// GetItemById mocks base method.
func (m *MockItemService) GetItemById(id int) (rest_api.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", id)
	ret0, _ := ret[0].(rest_api.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemServiceMockRecorder) GetItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemService)(nil).GetItemById), id)
}

// Update mocks base method.
func (m *MockItemService) Update(department rest_api.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", department)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemServiceMockRecorder) Update(department interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemService)(nil).Update), department)
}

// MockPublisherService is a mock of PublisherService interface.
type MockPublisherService struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherServiceMockRecorder
}

// MockPublisherServiceMockRecorder is the mock recorder for MockPublisherService.
type MockPublisherServiceMockRecorder struct {
	mock *MockPublisherService
}

// NewMockPublisherService creates a new mock instance.
func NewMockPublisherService(ctrl *gomock.Controller) *MockPublisherService {
	mock := &MockPublisherService{ctrl: ctrl}
	mock.recorder = &MockPublisherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherService) EXPECT() *MockPublisherServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPublisherService) Create(publisher rest_api.Publisher) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", publisher)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPublisherServiceMockRecorder) Create(publisher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPublisherService)(nil).Create), publisher)
}

// Delete mocks base method.
func (m *MockPublisherService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPublisherServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublisherService)(nil).Delete), id)
}

// GetAllPublishers mocks base method.
func (m *MockPublisherService) GetAllPublishers() ([]rest_api.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublishers")
	ret0, _ := ret[0].([]rest_api.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPublishers indicates an expected call of GetAllPublishers.
func (mr *MockPublisherServiceMockRecorder) GetAllPublishers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublishers", reflect.TypeOf((*MockPublisherService)(nil).GetAllPublishers))
}

// GetPublisherById mocks base method.
func (m *MockPublisherService) GetPublisherById(id int) (rest_api.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherById", id)
	ret0, _ := ret[0].(rest_api.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherById indicates an expected call of GetPublisherById.
func (mr *MockPublisherServiceMockRecorder) GetPublisherById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherById", reflect.TypeOf((*MockPublisherService)(nil).GetPublisherById), id)
}

// Update mocks base method.
func (m *MockPublisherService) Update(publisher rest_api.Publisher) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", publisher)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPublisherServiceMockRecorder) Update(publisher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPublisherService)(nil).Update), publisher)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(user rest_api.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), id)
}

// GetAllUsers mocks base method.
func (m *MockUserService) GetAllUsers() ([]rest_api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]rest_api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsers))
}

// GetUserById mocks base method.
func (m *MockUserService) GetUserById(id int) (rest_api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(rest_api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserService)(nil).GetUserById), id)
}

// Update mocks base method.
func (m *MockUserService) Update(user rest_api.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), user)
}

// MockItemHistoryService is a mock of ItemHistoryService interface.
type MockItemHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockItemHistoryServiceMockRecorder
}

// MockItemHistoryServiceMockRecorder is the mock recorder for MockItemHistoryService.
type MockItemHistoryServiceMockRecorder struct {
	mock *MockItemHistoryService
}

// NewMockItemHistoryService creates a new mock instance.
func NewMockItemHistoryService(ctrl *gomock.Controller) *MockItemHistoryService {
	mock := &MockItemHistoryService{ctrl: ctrl}
	mock.recorder = &MockItemHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemHistoryService) EXPECT() *MockItemHistoryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemHistoryService) Create(user rest_api.ItemHistory) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemHistoryServiceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemHistoryService)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockItemHistoryService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemHistoryServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemHistoryService)(nil).Delete), id)
}

// GetAllValues mocks base method.
func (m *MockItemHistoryService) GetAllValues() ([]rest_api.ItemHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValues")
	ret0, _ := ret[0].([]rest_api.ItemHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValues indicates an expected call of GetAllValues.
func (mr *MockItemHistoryServiceMockRecorder) GetAllValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValues", reflect.TypeOf((*MockItemHistoryService)(nil).GetAllValues))
}

// GetValueById mocks base method.
func (m *MockItemHistoryService) GetValueById(id int) (rest_api.ItemHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueById", id)
	ret0, _ := ret[0].(rest_api.ItemHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueById indicates an expected call of GetValueById.
func (mr *MockItemHistoryServiceMockRecorder) GetValueById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueById", reflect.TypeOf((*MockItemHistoryService)(nil).GetValueById), id)
}

// Update mocks base method.
func (m *MockItemHistoryService) Update(user rest_api.ItemHistory) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemHistoryServiceMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemHistoryService)(nil).Update), user)
}
